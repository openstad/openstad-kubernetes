
# TODO:
## Standard Helm annotations

# Optional Dependencies

##
## In this block you can toggle all optional dependencies.
## If you want to use an existing database(s) or services, disable
## the chart database(s) here.
##
## - To enable a depency, set the enabled value of the relevant
##   depency to true.
##
## - To disable a depency, set the enabled value of the relevant
##   depency to false.
##

dependencies:
  ## Database
  mongodb: 
    enabled: true
  mysql: 
    enabled: true

  ## SSL
  # FIXME:
  # When you enable cert-manager base resources
  # aren't created yet. #12
  cert-manager:
    enabled: false

# Settings

##
## All base settings can be changed in this block.
##

## Settings for MongoDB
mongodb:
  usePassword: false

## Settings for MySQL
mysql:
  image: # Docker Image
    tag: 5.7.30 # Docker Tag: 5.7.30 for compatibility
  db:
    # Credentials for both MongoDB and MySQL
    user: openstad
    password: examplePass2146

    # Name of the initial database
    name: image
    # The following databases will be created additionally 
    # during initialization:
    additionalDbNames:
      - api
      - auth
  
  # DB initialization scripts are put in this config map:
  initdbScriptsConfigMap: extra-db-map

## Settings for DNS
host:
  ### Base URL of the web app
  ### subdomains will be prefixed with a .
  ### to this url
  ### e.g. subdomain.example.com
  base: openstad.softwaredepartment.net

  ### Variants of the base url:
  www: www.openstad.softwaredepartment.net
  http: http://www.openstad.softwaredepartment.net
  https: https://www.openstad.softwaredepartment.net

## Settings for persistent volumes

persistence:
  storageClassName: null
  annotations: "{}"

## Settings for the Frontend

frontend:
  # Configure how many replicas exists of this service
  replicas: 1

  # Configure how the service is named and labeled
  name: "frontend"
  label: frontend

  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 4444
    managementPort: 9090

  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: frontend
    # Docker image for this pod
    image: openstad/frontend:debug
  
  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: true
    annotations: 
      cert-manager.io/cluster-issuer: letsencrypt-staging
      kubernetes.io/ingress.class: nginx
    extraLabels: {}
    hosts:
    - www.openstad.softwaredepartment.net
    tls:
    - secretName: openstad-tls-frontend
      hosts:
      - www.openstad.softwaredepartment.net

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 100m
      memory: 1Gi
    # Min resources
    requests:
      cpu: 100m
      memory: 500M

  # Probe checks whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60

  # Volumes:
  # Configure the persistent volumes for this service
  volumes:
    data:
      size:
        1Gi
    uploads:
      size:
        1Gi

## Settings for Adminer

adminer:
  # Configure how many replicas exists of this service
  replicas: 1

  # Configure how the service is named and labeled
  name: "adminer"
  label: adminer-web

  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 8080

  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: adminer
    # Docker image for this pod
    image: adminer

  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: false
    annotations: 
      cert-manager.io/cluster-issuer: letsencrypt-staging
      kubernetes.io/ingress.class: nginx
    extraLabels: {}
    hosts:
    - www.openstad.softwaredepartment.net
    tls:
    - secretName: openstad-tls-adminer
      hosts:
      - www.openstad.softwaredepartment.net

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 100m
      memory: 1Gi
    # Min resources
    requests:
      cpu: 100m
      memory: 500M

  # Check whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60

## Settings for the Auth server

auth:
  # Configure how many replicas exists of this service
  replicas: 1

  # Configure how the service is named and labeled
  name: "auth"
  label: auth-container

  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 4000
  
  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: auth
    # Docker image for this pod
    image: openstad/auth:test

  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: true
    annotations: 
      cert-manager.io/cluster-issuer: letsencrypt-staging
      kubernetes.io/ingress.class: nginx
    extraLabels: {}
    hosts:
    - www.auth.openstad.softwaredepartment.net
    tls:
    - secretName: openstad-tls-auth
      hosts:
      - www.auth.openstad.softwaredepartment.net

  volumes:
    certs:
      size:
        1Gi

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 100m
      memory: 1Gi
    # Min resources
    requests:
      cpu: 100m
      memory: 500M

  # Check whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60


## Settings for the API server

api:
  # Configure how many replicas exists of this service
  replicas: 1

  # Configure how the service is named and labeled
  name: "api"
  label: openstad-api
  
  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 8111

  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: api-container
    # Docker image for this pod
    image: openstad/api:test

  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: true
    annotations: 
      cert-manager.io/cluster-issuer: letsencrypt-staging
      kubernetes.io/ingress.class: nginx
    extraLabels: {}
    hosts:
    - www.api.openstad.softwaredepartment.net
    tls:
    - secretName: openstad-tls-api
      hosts:
      - www.api.openstad.softwaredepartment.net

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 100m
      memory: 1Gi
    # Min resources
    requests:
      cpu: 100m
      memory: 500M

  # Check whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60

## Settings for the Image server

image:
  # Configure how many replicas exists of this service
  replicas: 1

  # Configure how the service is named and labeled
  name: "image"
  label: image-container
  
  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 4100
  
  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: image
    # Docker image for this pod
    image: openstad/image:test
  
  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: true
    annotations: 
      cert-manager.io/cluster-issuer: letsencrypt-staging
      kubernetes.io/ingress.class: nginx
    extraLabels: {}
    hosts:
      - www.img.openstad.softwaredepartment.net
    tls:
      - secretName: openstad-tls-image
        hosts:
          - www.img.openstad.softwaredepartment.net

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 100m
      memory: 1Gi
    # Min resources
    requests:
      cpu: 100m
      memory: 500M

  # Check whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60

  # Volumes:
  # Configure the persistent volumes for this service
  volumes:
    data:
      size:
        1Gi

# Overwrite Secrets

##
## In this block you can choose to overwrite
## the default values of the secrets.
##

secrets:
  database: 
    secretName:
    image:
      dbName: image
      secretName:
    auth:
      dbName: auth
      secretName:
      credentials:
        secretName:
    api:
      dbName: api
      secretName:
    frontend:
      secretName:
    adminer:
      secretName:

  hosts:
    secretName:

  cookies:
    secretName:

  mail:
    auth:
      secretName:
    api:
      secretName:

  mongodb:
    secretName:
