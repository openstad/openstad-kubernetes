# Optional Dependencies

##
## In this block you can toggle all optional dependencies.
## If you want to use an existing database(s) or services, disable
## the chart database(s) here.
##
## - To enable a dependency, set the enabled value of the relevant
##   dependency to true.
##
## - To disable a dependency, set the enabled value of the relevant
##   dependency to false.
##
## Note: If you use an existing database, please change the
##      relevant credentials in secrets.database for MySQL and/or
##      secrets.mongodb for MongoDB
##
dependencies:
  ## Database
  mongodb:
    enabled: true
  mysql:
    enabled: true

  ## SSL
  cert-manager:
    enabled: false

cert-manager:
  # Whether we want to install CRDs.
  installCRDs: true

## Settings for MongoDB
mongodb:
  image:
    tag: 5.0.13-debian-11-r5
  auth:
    enabled: false

## Settings for MySQL
mysql:
  db:
    # Credentials for both MongoDB and MySQL
    # NOTE: Also change this in secrets
    user: openstad
    password: examplePass2146

    name: image

    # The following databases will be created additionally
    # during initialization:
    additionalDbNames:
      - api
      - auth

  # DB initialization scripts are put in this config map:
  initdbScriptsConfigMap: extra-db-map

  # Secret which can be controlled by us
  auth:
    username: openstad
    database: image
    existingSecret: mysql-secret

  primary:
    extraEnvVars:
      # Use the older authentication plugin
      - name: MYSQL_AUTHENTICATION_PLUGIN
        value: mysql_native_password

# Internal config
public:
  name: openstad

# Settings

##
## Settings for when you use one or more dependencies from above
##

## Settings for Cert-Manager/Cluster issuer
clusterIssuer:
  enabled: false # Whether this issuer is created
  acme: # Email used for requesting the certificates
    email: info@openstad.org

  ### If you want to use a production issuer set the following to true
  useProdIssuer: false

  ### Name of the production issuer
  prodIssuerName: openstad-letsencrypt-prod
  ### Name of the staging issuer
  stagingIssuerName: openstad-letsencrypt-staging

##
## All base settings can be changed in this block.
##

## Settings for DNS
host:
  ### Base URL of the web app
  ### subdomains will be prefixed with a .
  ### to this url
  ### e.g. subdomain.example.com
  base: openstad.softwaredepartment.net
  ### publicIp is used to check if DNS is set properly
  publicIp:

  ### Whether we should append www to the domains
  usewww: false

## Settings for persistent volumes

persistence:
  #configure the cloud-specific storageClassName, will use the clouds default if not specified
  storageClassName:
  annotations: "{}"

frontend:
  # Configure how many replicas exists of this service
  replicas: 1
  # Configure how the service is named and labeled
  name: "frontend"
  label: openstad-frontend-service

  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 4444
    managementPort: 9090

  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: frontend
    # Docker image for this pod
    image: openstad/frontend:v0.41.0

  # Optional to use an S3 for ApostropheCMS attachments.
  S3:
    endpoint:
    key:
    secret:
    bucket:
    region:

  # Subdomain for the service:
  # If filled it it will create a default url of: www.$subdomain.$baseurl
  # If not filled in the base will be used instead: www.$baseurl
  subdomain:

  googleMapsApiKey:

  cookieMaxAge:

  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: true # Whether there is a ingress for this service
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 128m
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "X-Content-Type-Options: nosniff";
        more_set_headers "X-Frame-Options: SAMEORIGIN";
        more_set_headers "X-Xss-Protection: 1";
        more_set_headers "Referrer-Policy: same-origin";
    extraLabels: {}
    hosts: []
    tls:
      secretName: openstad-tls-frontend
      hosts: []

  # Inject extra environment variables
  extraEnvVars: []

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 1
      memory: 1Gi
    # Min resources
    requests:
      cpu: 500m
      memory: 500M

  # Probe checks whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60

  # Volumes:
  # Configure the persistent volumes for this service
  volumes:
    data:
      size: 1Gi
    uploads:
      size: 1Gi

## S3 settings, backups,
## dbsToBackup would be nice to automatically get from the other values, but for now this is simpler.
S3:
  mongoBackups: on
  dbsToBackup: api,auth,image
  endpoint:
  key:
  secret:
  bucket:

## Settings for Adminer
adminer:
  # Configure how many replicas exists of this service
  replicas: 1

  # Configure how the service is named and labeled
  name: "adminer"
  label: openstad-adminer-service

  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 8080

  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: adminer
    # Docker image for this pod
    image: adminer

  # Subdomain for the service:
  # If filled it it will create a default url of: www.$subdomain.$baseurl
  # If not filled in the base will be used instead: www.$baseurl
  subdomain:

  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: false # Whether there is a ingress for this service
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 128m
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "X-Content-Type-Options: nosniff";
        more_set_headers "X-Frame-Options: SAMEORIGIN";
        more_set_headers "X-Xss-Protection: 1";
        more_set_headers "Referrer-Policy: same-origin";
    extraLabels: {}
    hosts: []
    tls:
      secretName: openstad-tls-adminer
      hosts: []

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 100m
      memory: 1Gi
    # Min resources
    requests:
      cpu: 100m
      memory: 500M

  # Check whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60

## Settings for the Auth server

auth:
  # Configure how many replicas exists of this service
  replicas: 1

  # Configure how the service is named and labeled
  name: "auth"
  label: openstad-auth-service

  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 4000

  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: auth
    # Docker image for this pod
    image: openstad/auth:v0.41.0

  # Subdomain for the service:
  # If filled it it will create a default url of: www.$subdomain.$baseurl
  # If not filled in the base will be used instead: www.$baseurl
  subdomain: auth

  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: true # Whether there is a ingress for this service
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "X-Content-Type-Options: nosniff";
        more_set_headers "X-Frame-Options: SAMEORIGIN";
        more_set_headers "X-Xss-Protection: 1";
        more_set_headers "Referrer-Policy: same-origin";
    extraLabels: {}
    hosts: []
    tls:
      secretName: openstad-tls-auth
      hosts: []

  # Inject extra environment variables
  extraEnvVars: []

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 300m
      memory: 1Gi
    # Min resources
    requests:
      cpu: 100m
      memory: 500M

  # Check whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60

  defaultFavicon:

  fromName:
  fromEmail:

## Settings for the Admin server
admin:
  # Configure how many replicas exists of this service
  replicas: 1
  siteId: "1"
  externalSiteRepo: https://api2.openstad.amsterdam/api/repo

  # Configure how the service is named and labeled
  name: "admin"
  label: openstad-admin-service
  wildcardHost:

  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 7777

  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: admin
    # Docker image for this pod
    image: openstad/admin:v0.13.0

  # Subdomain for the service:
  # If filled it it will create a default url of: www.$subdomain.$baseurl
  # If not filled in the base will be used instead: www.$baseurl
  subdomain: admin

  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: true # Whether there is a ingress for this service
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 128m
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "X-Content-Type-Options: nosniff";
        more_set_headers "X-Frame-Options: SAMEORIGIN";
        more_set_headers "X-Xss-Protection: 1";
        more_set_headers "Referrer-Policy: same-origin";
    extraLabels: {}
    hosts: []
    tls:
      secretName: openstad-tls-admin
      hosts: []

  # Inject extra environment variables
  extraEnvVars: []

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 500m
      memory: 1Gi
    # Min resources
    requests:
      cpu: 100m
      memory: 500M

  # Check whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60

## Settings for the API server

api:
  # Configure how many replicas exists of this service
  replicas: 1

  # Do we need to reset the database on install? Defaults to true, assuming that we are using a
  # pristine database volume, however, if the database volumes exists and the application is not installed (
  # after an uninstall or when using an existing database) then you might set this flag to false, so the database is re-used
  resetApiDatabaseOnInstall: true

  # Configure how the service is named and labeled
  name: "api"
  label: openstad-api-service
  emailAddress: info@example.com
  # The userId that is attached to the fixed auth token
  fixedUserId: 2

  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 8111

  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: api-container
    # Docker image for this pod
    image: openstad/api:v0.14.0

  # Subdomain for the service:
  # If filled it it will create a default url of: www.$subdomain.$baseurl
  # If not filled in the base will be used instead: www.$baseurl
  subdomain: api

  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: true # Whether there is a ingress for this service
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 128m
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "X-Content-Type-Options: nosniff";
        more_set_headers "X-Frame-Options: SAMEORIGIN";
        more_set_headers "X-Xss-Protection: 1";
        more_set_headers "Referrer-Policy: same-origin";
    extraLabels: {}
    hosts: []
    tls:
      secretName: openstad-tls-api
      hosts: []

  # Inject extra environment variables
  extraEnvVars: []

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 500m
      memory: 1Gi
    # Min resources
    requests:
      cpu: 250m
      memory: 500M

  # Check whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60

## Settings for the Image server

image:
  # Configure how many replicas exists of this service
  replicas: 1

  # Configure how the service is named and labeled
  name: "image"
  label: openstad-image-service

  # Service settings:
  # Primarily port configuration
  service:
    httpPort: 9999

  # Deployment container is what is eventually run in the pod
  deploymentContainer:
    name: image
    # Docker image for this pod
    image: openstad/image:v0.7.0

  # Subdomain for the service:
  # If filled it it will create a default url of: www.$subdomain.$baseurl
  # If not filled in the base will be used instead: www.$baseurl
  subdomain: img

  # Ingress settings:
  # Configure how the service is accessed
  ingress:
    enabled: true # Whether there is a ingress for this service
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 128m
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "X-Content-Type-Options: nosniff";
        more_set_headers "X-Frame-Options: SAMEORIGIN";
        more_set_headers "X-Xss-Protection: 1";
        more_set_headers "Referrer-Policy: same-origin";
    extraLabels: {}
    hosts: []
    tls:
      secretName: openstad-tls-image
      hosts: []

  # Inject extra environment variables
  extraEnvVars: []

  # Resources:
  resources:
    # Max resources
    limits:
      cpu: 500m
      memory: 1Gi
    # Min resources
    requests:
      cpu: 100m
      memory: 500M

  # Check whether the service is healthy:
  # First time after $(initialDelaySeconds) seconds.
  # After that every $(periodSeconds) seconds
  probe:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 60

  # Volumes:
  # Configure the persistent volumes for this service
  volumes:
    data:
      size: 1Gi

# Overwrite Secrets

##
## In this block you can choose to overwrite
## the default values of the secrets.
##

secrets:
  database:
    ### These values are for the MySQL db
    username:
    password:
    type:
    dbName:
    hostname:
    hostport:
    # Max connections used in connection pool
    maxPoolSize: 5

    # If you want to force an SSL connection to MySQL, provide a CA cert here
    # This should be the content of the CA cert, including `-----BEGIN CERTIFICATE-----`
    # Most cloud providers will provide this CA cert in their documentation;
    # Amazon: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html
    # Azure: https://docs.microsoft.com/en-us/azure/mysql/single-server/how-to-configure-ssl
    # Google Cloud Platform: https://cloud.google.com/sql/docs/mysql/configure-ssl-instance
    caCert:

    ### Default db passwords for when you use the dependency
    rootPassword:
    replicationPassword:

    ### Overwrites for image db
    image:
      dbName: image

    ### Overwrites for auth db
    auth:
      dbName: auth
      credentials:
        clientId:
        clientSecret:
        fixedUserId:
        fixedToken:
        firstLoginToken:
        adminClientId:
        adminClientSecret:
        imageApiToken:

    ### Overwrites for API db
    api:
      dbName: api

  ### Local references to services:
  hosts:
    api:
    auth:
    frontend:
    image:

  ### Cookie secrets
  cookies:
    cookieName:
    onlySecure:
    jwtSecret:

  ### Mail server secretes
  mail:
    auth:
      host:
      port:
      emailAssetsUrl:
      user:
      password:
      secure: "yes"

    api:
      host:
      port:
      user:
      emailFrom:
      adminEmailFrom:
      password:
      requireSsl:

  mongodb:
    ### These values are for MongoDB
    hostname:
    hostport:
    database:
    user:
    password:

    # The authSource allows us to specify which database is associated with the given credentials.
    # Reference: https://www.mongodb.com/docs/manual/reference/connection-string/#mongodb-urioption-urioption.authSource
    authSource:

    # The frontendConnectionString will take priority over the above MongoDB configuration for the frontend service
    # Use {database} in this string to allow the application to specify the correct database
    # Reference: https://www.mongodb.com/docs/manual/reference/connection-string/
    # Example: "mongodb://mongoadmin:mongoadmin@localhost:27017/{database}?authSource=admin"
    frontendConnectionString:

    # The authConnectionString will take priority over the above MongoDB configuration for the auth service
    # Keep in mind that the default database for the auth environment is `sessions`
    # If this contains the `{database}` string, this will be replaced with `sessions` before being passed into the auth service
    # Reference: https://www.mongodb.com/docs/manual/reference/connection-string/
    # Example: "mongodb://mongoadmin:mongoadmin@localhost:27017/sessions?authSource=admin"
    authConnectionString:

    # The adminConnectionString will take priority over the above MongoDB configuration for the admin service
    # Use {database} in this string to allow the application to specify the correct database
    # Reference: https://www.mongodb.com/docs/manual/reference/connection-string/
    # Example: "mongodb://mongoadmin:mongoadmin@localhost:27017/{database}?authSource=admin"
    adminConnectionString:

  basicAuth:
    user:
    password:
